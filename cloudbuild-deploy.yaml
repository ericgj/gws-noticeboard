
steps:
  - name: 'gcr.io/cloud-builders/gcloud'   
    entrypoint: '/bin/sh'
    args:
    - -c
    - 'bin/kms decrypt ${_ENV} '

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: '/bin/sh'
    args: 
    - -c
    - 'bin/test functions write ${_ENV}'

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: '/bin/sh'
    args: 
    - -c
    - 'bin/test functions fetch ${_ENV}'

  # Fetch next app state (blue or green) based on GAE traffic split
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args:
    - -c
    - 'bin/fetch-app-state ${_ENV} --next --service default  > app-state.txt'

  # Deploy write function given next blue/green app state
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args: 
    - -c
    - 'bin/deploy functions write ${_ENV} --app-state "$(cat app-state.txt)" '

  # Deploy fetch function given next blue/green app state
  # publishing to write (pubsub topic)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args: 
    - -c
    - 'bin/deploy functions fetch ${_ENV} --app-state "$(cat app-state.txt)" --publish-topic write '

  # Deploy default GAE service given next blue/green app state
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args: 
    - -c
    - 'bin/deploy services default ${_ENV} --app-state "$(cat app-state.txt)" '

substitutions:
  _ENV: staging

