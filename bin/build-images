#!/usr/bin/env python

# Note: python2.7 compatible for gcloud builder

from __future__ import print_function
from argparse import ArgumentParser, ArgumentTypeError
import os
import os.path
import subprocess
import sys


def stderr(s):
    print(s, file=sys.stderr)


IMAGE_TYPES = [
    f
    for f in os.listdir("images")
    if os.path.isfile(os.path.join("images", f)) and not f.startswith(".")
]


def main(parser, argv=sys.argv[1:]):
    args = parser.parse_args(argv)
    project = args.project if args.project is not None else gcloud_current_project()
    if project is None:
        raise ArgumentTypeError("Please specify a project or set it globally in gcloud")

    for image in args.images:
        stderr("Building image %s..." % (image,))
        image_tag = gcloud_build_image(project, image)

        stderr("Pushing image %s --> %s..." % (image, image_tag))
        gcloud_push_image(image_tag)

    stderr("Done.")


def gcloud_current_project():
    cmd = ["gcloud", "config", "get-value", "project"]
    p = subprocess.Popen(
        cmd, shell=False, stderr=subprocess.PIPE, stdout=subprocess.PIPE
    )
    outp, _ = p.communicate()
    outp = ("" if outp is None else outp).strip()
    if not p.returncode == 0:
        raise subprocess.CalledProcessError(
            cmd=cmd, returncode=p.returncode, output=outp
        )
    return outp if len(outp) > 0 else None


def gcloud_build_image(project, image):
    image_tag = "gcr.io/%s/%s" % (project, image)
    image_file = "images/%s" % (image,)
    subprocess.check_call(
        ["docker", "build", "-t", image_tag, "-f", image_file, "."],
        shell=False,
        stdout=sys.stdout,
        stderr=sys.stderr,
    )
    return image_tag


def gcloud_push_image(image_tag):
    subprocess.check_call(
        ["docker", "push", image_tag], shell=False, stdout=sys.stdout, stderr=sys.stderr
    )


parser = ArgumentParser(
    description="Rebuild base images for project. Rebuild all if none specified"
)
parser.add_argument("--project", default=None, help="GCP project (if not set globally)")
parser.add_argument("images", nargs="*", default=IMAGE_TYPES)


if __name__ == "__main__":
    try:
        main(parser)
    except Exception as e:
        # raise e
        exit(e)
