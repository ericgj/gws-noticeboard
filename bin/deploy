#!/usr/bin/env python

# Note: python2.7 compatible for gcloud builder

from __future__ import print_function
from argparse import ArgumentParser
import os
import os.path
import subprocess
import sys

from ruamel.yaml import YAML

yaml = YAML(typ="safe")


def stderr(s):
    print(s, file=sys.stderr)


def get_project():
    try:
        proj = open("secrets/project").read().strip()
        if len(proj) == 0:
            exit("Project not found. Is your secrets/project file empty?")
        return proj
    except OSError:
        exit("Project not found. Check secrets/project file.")


def mkdir_p(d):
    if os.path.exists(d) and os.path.isdir(d):
        return
    os.makedirs(d)


FUNCTION_TRIGGER_TYPES = ["pubsub", "http", "bucket"]


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------


def main(parser, argv=sys.argv[1:]):
    args = parser.parse_args(argv)
    # run_build(args)
    args.func(args, get_project())


def deploy_function(args, project):
    env = load_function_env(args)
    assert_env(env)

    if args.prompt:
        if not prompt_env(env):
            exit("Cancelled.")

    subdom = env["APP_SUBDOMAIN"]
    service = env["APP_SERVICE"]
    environment = env["APP_ENV"]
    app_state = env["APP_STATE"]
    sub_name = env["APP_SUBSCRIBE_TOPIC"]
    pub_name = env["APP_PUBLISH_TOPIC"]

    entry_point = service.lower() if args.entry_point is None else args.entry_point

    func_name = gcf_function_name(
        subdomain=subdom,
        service=service,
        entry_point=entry_point,
        env=environment,
        app_state=None if app_state is None or len(app_state) == 0 else app_state,
    )
    service_account_name = service_account_for(subdom, project)

    entry_point_opts = ["--entry-point", entry_point]

    source_opts = ["--source", os.path.join(args.build_dir, "src")]

    trigger_opts = ["--trigger-topic", sub_name]

    set_env_opts = [
        "--set-env-vars",
        ",".join(["%s=%s" % (k, v) for (k, v) in env.items()]),
    ]

    service_account_opts = ["--service-account", service_account_name]

    project_opts = ["--project", project]

    stderr("Creating topic %s if it doesn't exist..." % (pub_name,))
    create_pubsub_topic_if_not_exists(pub_name, project)

    stderr("Authorizing service account to publish to topic %s..." % (pub_name,))
    authorize_service_account_to_publish_to(pub_name, service_account_name, project)

    stderr("Deploying function %s..." % (func_name,))
    subprocess.check_call(
        ["gcloud", "functions", "deploy", func_name, "--runtime", "python37"]
        + entry_point_opts
        + source_opts
        + trigger_opts
        + set_env_opts
        + service_account_opts
        + project_opts,
        shell=False,
        stdout=sys.stdout,
        stderr=sys.stderr,
    )

    stderr("Done.")


def load_function_env(args):
    envyaml = os.path.join(args.build_dir, "env.yaml")
    env = None
    with open(envyaml) as f:
        env = yaml.load(f)
    return env


def assert_env(env):
    assert isinstance(env, dict), "Environment variable file empty or wrong format"
    assert "APP_SUBDOMAIN" in env, "Missing variable 'APP_SUBDOMAIN'"
    assert "APP_SERVICE" in env, "Missing variable 'APP_SERVICE'"
    assert "APP_ENV" in env, "Missing variable 'APP_ENV'"
    assert "APP_STATE" in env, "Missing variable 'APP_STATE'"
    assert "APP_SUBSCRIBE_TOPIC" in env, "Missing variable 'APP_SUBSCRIBE_TOPIC'"
    assert "APP_PUBLISH_TOPIC" in env, "Missing variable 'APP_PUBLISH_TOPIC'"


def prompt_env(env):
    stderr(
        """
You appear to be trying to deploy service {APP_SERVICE} in subdomain {APP_SUBDOMAIN},
in the {APP_ENV} environment. Is this correct? Here is the full environment:

""".format(**env)
    )
    for (k, v) in env.items():
        stderr("%-22s = %s" % (k, v))
    stderr("")
    resp = None
    while (resp is None) or (resp.upper() not in ["Y", "YES", "N", "NO", ""]):
        resp = input("(yes/No)? ")
    return resp.upper() in ["Y", "YES"]


def gcf_function_name(*, subdomain, service, entry_point, env, app_state=None):
    name = "_".join([part.lower() for part in (subdomain, service, entry_point)])
    mod = "--".join([part.lower() for part in (env, app_state) if part is not None])
    return "--".join([name, mod])


def deploy_app(args):
    raise NotImplementedError()


def create_pubsub_topic_if_not_exists(topic, project):
    project_opts = ["--project", project]
    rc = subprocess.call(
        ["gcloud", "pubsub", "topics", "create", topic] + project_opts,
        shell=False,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    if not rc == 0:
        subprocess.check_call(
            ["gcloud", "pubsub", "topics", "describe", topic] + project_opts,
            shell=False,
            stdout=subprocess.PIPE,
            stderr=sys.stderr,
        )


def service_account_for(subdom, project):
    return "%s-%s@%s.iam.gserviceaccount.com" % (
        project.lower(),
        subdom.lower(),
        project.lower(),
    )


def authorize_service_account_to_publish_to(topic, email, project):
    project_opts = ["--project", project]
    subprocess.check_call(
        ["gcloud", "beta", "pubsub", "topics", "add-iam-policy-binding", topic]
        + ["--member", "serviceAccount:%s" % (email,)]
        + ["--role", "roles/pubsub.publisher"]
        + project_opts,
        shell=False,
        stdout=subprocess.PIPE,
        stderr=sys.stderr,
    )


# ------------------------------------------------------------------------------
# ARGUMENT PARSER
# ------------------------------------------------------------------------------


def add_common_options(p):
    p.add_argument("--prompt", action="store_true", help="prompt before deploy")
    p.add_argument(
        "--no-prompt",
        action="store_false",
        dest="prompt",
        help="do not prompt before deploy",
    )
    p.add_argument("--build-dir", default="build", help="build directory")
    p.set_defaults(prompt=True)


parser = ArgumentParser(description="Deploy domain services")
subparser = parser.add_subparsers()

function_parser = subparser.add_parser(
    "function", description="Deploy service as Google Cloud Function"
)
add_common_options(function_parser)
function_parser.add_argument(
    "--entry-point", type=str, default=None, help="function entry point"
)
function_parser.set_defaults(func=deploy_function)

app_parser = subparser.add_parser(
    "app", description="Deploy service as Google App Engine service"
)
add_common_options(app_parser)
app_parser.set_defaults(func=deploy_app)


if __name__ == "__main__":
    try:
        main(parser)
    except Exception as e:
        raise e
        # exit(e)
